import { Box, Text } from "ink";
import TextInput from "ink-text-input";
import type React from "react";
import { useEffect, useState } from "react";
import { createExtension } from "../../api/mittwald.js";

interface ExtensionSetupProps {
	projectName: string;
	extensionContext: "customer" | "project";
	selectedCustomerId: string;
	onComplete: (config: {
		extensionId: string;
		extensionSecret: string;
		extensionName: string;
		frontendUrl?: string;
		webhookUrl?: string;
	}) => void;
}

type SetupState =
	| "extensionName"
	| "frontendUrl"
	| "webhookUrl"
	| "creating"
	| "success"
	| "error";

export const ExtensionSetup: React.FC<ExtensionSetupProps> = ({
	projectName,
	extensionContext,
	selectedCustomerId,
	onComplete,
}) => {
	const [state, setState] = useState<SetupState>("extensionName");
	const [extensionName, setExtensionName] = useState(
		`${projectName}-extension`,
	);
	const [frontendUrl, setFrontendUrl] = useState("");
	const [webhookUrl, setWebhookUrl] = useState("");
	const [createdExtensionId, setCreatedExtensionId] = useState("");
	const [error, setError] = useState("");

	const handleExtensionNameSubmit = () => {
		if (extensionName.trim().length > 0) {
			setState("frontendUrl");
		}
	};

	const handleFrontendUrlSubmit = () => {
		setState("webhookUrl");
	};

	const handleWebhookUrlSubmit = () => {
		setState("creating");
	};

	useEffect(() => {
		if (state === "creating") {
			const performCreate = async () => {
				try {
					const result = await createExtension({
						contributorId: selectedCustomerId,
						name: extensionName,
						context: extensionContext,
						description: `${extensionName} - Generated by mittvibes CLI`,
						frontendUrl: frontendUrl.trim() || undefined,
						webhookUrl: webhookUrl.trim() || undefined,
					});

					setCreatedExtensionId(result.extensionId);
					setState("success");

					onComplete({
						extensionId: result.extensionId,
						extensionSecret: result.extensionSecret,
						extensionName,
						frontendUrl: frontendUrl.trim() || undefined,
						webhookUrl: webhookUrl.trim() || undefined,
					});
				} catch (err) {
					setError(err instanceof Error ? err.message : String(err));
					setState("error");
				}
			};

			performCreate();
		}
	}, [
		state,
		selectedCustomerId,
		extensionName,
		extensionContext,
		frontendUrl,
		webhookUrl,
		onComplete,
	]);

	if (state === "creating") {
		return (
			<Box flexDirection="column">
				<Text color="white" bold>
					üéØ Creating Extension
				</Text>
				<Box marginTop={1}>
					<Text>Creating extension via mittwald API...</Text>
				</Box>
			</Box>
		);
	}

	if (state === "error") {
		return (
			<Box flexDirection="column">
				<Text color="red" bold>
					‚ùå Extension Creation Failed
				</Text>
				<Box marginTop={1}>
					<Text color="red">{error}</Text>
				</Box>
			</Box>
		);
	}

	if (state === "success") {
		return (
			<Box flexDirection="column">
				<Text color="green" bold>
					‚úÖ Extension Created Successfully!
				</Text>
				<Box marginTop={1}>
					<Text color="white">Extension ID: </Text>
					<Text color="green">{createdExtensionId}</Text>
				</Box>
				<Box marginTop={1}>
					<Text>Your extension has been registered via the API.</Text>
				</Box>
			</Box>
		);
	}

	if (state === "extensionName") {
		return (
			<Box flexDirection="column">
				<Text color="white" bold>
					üéØ Extension Development Setup
				</Text>
				<Box marginTop={1}>
					<Text>
						Your extension will be automatically created via the mittwald API.
					</Text>
				</Box>
				<Box marginTop={1}>
					<Text color="white" bold>
						Configuration:
					</Text>
				</Box>
				<Box>
					<Text color="gray"> ‚Ä¢ Context: </Text>
					<Text color="white">{extensionContext}</Text>
				</Box>
				<Box>
					<Text color="gray"> ‚Ä¢ Scopes: </Text>
					<Text color="white">Empty</Text>
				</Box>

				<Box marginTop={2}>
					<Text>Extension name:</Text>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">Name: </Text>
					<TextInput
						value={extensionName}
						onChange={setExtensionName}
						onSubmit={handleExtensionNameSubmit}
					/>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">Press Enter to continue...</Text>
				</Box>
			</Box>
		);
	}

	if (state === "frontendUrl") {
		return (
			<Box flexDirection="column">
				<Text color="white" bold>
					üéØ Extension Development Setup
				</Text>

				<Box marginTop={1}>
					<Text>Frontend URL (where your extension will be hosted):</Text>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">URL: </Text>
					<TextInput
						value={frontendUrl}
						onChange={setFrontendUrl}
						onSubmit={handleFrontendUrlSubmit}
						placeholder="https://your-domain.com"
					/>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">
						Your public URL (e.g., ngrok, cloudflared tunnel)
					</Text>
				</Box>
				<Box marginTop={1}>
					<Text color="yellow">
						Note: You can update this later in mStudio after deployment
					</Text>
				</Box>
			</Box>
		);
	}

	if (state === "webhookUrl") {
		return (
			<Box flexDirection="column">
				<Text color="white" bold>
					üéØ Extension Development Setup
				</Text>

				<Box marginTop={1}>
					<Text>Webhook URL (optional, press Enter to skip):</Text>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">URL: </Text>
					<TextInput
						value={webhookUrl}
						onChange={setWebhookUrl}
						onSubmit={handleWebhookUrlSubmit}
						placeholder="https://your-domain.com/webhook"
					/>
				</Box>
				<Box marginTop={1}>
					<Text color="gray">Leave empty to configure later in mStudio...</Text>
				</Box>
			</Box>
		);
	}

	return null;
};
